<!--
	<H3>The Cleaner Agent.</H3>

	The agent mainly has 3 top-level goals:<br>
	- Searching for waste (perform lookforwaste).<br>
	- Cleaning up waste (achieve cleanup).<br>
	- Keep the battery loaded (maintain battery loaded).<br><br>

	To achieve this goals it uses various
	subgoals for decomposition of the overall
	tasks.
-->
<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex 
	                    http://jadex.sourceforge.net/jadex-0.96.xsd"
	name="Cleaner"
	package="jadex.examples.cleanerworld.multi.cleanermobile">

	<imports>
		<import>jadex.examples.cleanerworld.multi.*</import>
		<import>jadex.examples.cleanerworld.multi.ontology.*</import>
		<import>jadex.runtime.*</import>
		<import>jadex.planlib.*</import>
		<import>jadex.util.*</import>
		<import>jadex.*</import>
		<import>java.util.logging.*</import>
		<import>jadex.adapter.fipa.*</import>
	</imports>

	<capabilities>
		<capability name="procap" file="jadex.planlib.ProtocolsMobile"/>
		<capability name="dfcap" file="jadex.planlib.DFMobile"/>
	</capabilities>

	<beliefs>
		<belief name="environment" class="IEnvironment">
			<!-- local environment (comment out for remote) -->
			<!--<fact>Environment.getInstance()</fact>-->
		</belief>

		<!-- The connection to the environment (agent). -->
		<belief name="environmentagent" class="AgentIdentifier" transient="true"/>

		<!-- The known wastes. -->
		<beliefset name="wastes" class="Waste" />

		<!-- The known waste bins. -->
		<beliefset name="wastebins"  class="Wastebin" />

		<!-- The known charging stations. -->
		<beliefset name="chargingstations" class="Chargingstation" />

		<!-- The known cleaners. -->
		<beliefset name="cleaners" class="Cleaner" />

		<!-- The raster .-->
		<beliefset name="raster" class="Integer">
			<fact>10</fact>
			<fact>10</fact>
		</beliefset>

		<!-- The statistics of visited map points. -->
		<beliefset name="visited_positions" class="MapPoint">
			<!-- The facts tag generates several facts retrieved by the stated expression -->
			<facts>
 				MapPoint.getMapPointRaster($beliefbase.raster[0].intValue(), $beliefbase.raster[1].intValue(), 1, 1)
			</facts>
		</beliefset>

		<!-- The actual daytime (day vs. night). -->
		<belief name="daytime"  class="Boolean">
			<fact>true</fact>
		</belief>

		<!-- The current cleaner location. -->
		<belief name="my_location"  class="Location">
			<fact>new Location(0.2, 0.2)</fact>
		</belief>

		<!-- The speed. -->
		<belief name="my_speed" class="Double">
			<fact>3</fact>
		</belief>

		<!-- The radius describing how far the agent can see. -->
		<belief name="my_vision" class="Double">
			<fact>0.1</fact>
		</belief>

		<!-- The battery charging state (1.0 full -> 0.0 empty). -->
		<belief name="my_chargestate" class="Double">
			<fact>0.85</fact>
		</belief>

		<!-- The actual carried waste. -->
		<belief name="carriedwaste" class="Waste"/>

		<!-- The points used for patrolling at night. -->
		<beliefset name="patrolpoints" class="Location">
			<fact>new Location(0.1, 0.1)</fact>
			<fact>new Location(0.1, 0.9)</fact>
			<fact>new Location(0.3, 0.9)</fact>
			<fact>new Location(0.3, 0.1)</fact>
			<fact>new Location(0.5, 0.1)</fact>
			<fact>new Location(0.5, 0.9)</fact>
			<fact>new Location(0.7, 0.9)</fact>
			<fact>new Location(0.7, 0.1)</fact>
			<fact>new Location(0.9, 0.1)</fact>
			<fact>new Location(0.9, 0.9)</fact>
		</beliefset>
	</beliefs>

	<goals>

		<!-- Top-level goals -->

		<!-- Observe the battery state. -->
		<maintaingoal name="maintainbatteryloaded">
			<deliberation>
				<inhibits ref="performlookforwaste" inhibit="when_in_process"/>
				<inhibits ref="achievecleanup" inhibit="when_in_process"/>
				<inhibits ref="performpatrol" inhibit="when_in_process"/>
			</deliberation>
			<!-- Engage in actions when the state is below 0.2. -->
 			<maintaincondition>
 				$beliefbase.my_chargestate.doubleValue() > 0.2
			</maintaincondition>
			<!-- The goal is satisfied when the charge state is 1.0. -->
			<targetcondition>
 				$beliefbase.my_chargestate.doubleValue() >= 1.0
			</targetcondition>
		</maintaingoal>

		<!-- Clean up some waste. -->
		<achievegoal name="achievecleanup" retry="true" exclude="when_failed">
			<parameter name="waste" class="Waste">
				<bindingoptions>$beliefbase.wastes</bindingoptions>
			</parameter>
			<unique/>
			<!-- Create a new goal when new waste is seen and
				the agent isnt already cleaning. -->
			<creationcondition>
				true
			</creationcondition>
			<!-- Suspend the goal during loading and when it is night. -->
			<contextcondition>
				$beliefbase.daytime.booleanValue()
			</contextcondition>
			<!-- The goal will be dropped when
 				the agent currently walks to the waste and the waste has vanished. -->
			<dropcondition>
				$beliefbase.carriedwaste==null &amp;&amp;
					!$beliefbase.getBeliefSet("wastes").containsFact($goal.waste)
			</dropcondition>
			<deliberation cardinality="1">
				<inhibits ref="performlookforwaste"/>
				<inhibits ref="achievecleanup">
					$beliefbase.my_location.getDistance($goal.waste.getLocation())
					&lt; $beliefbase.my_location.getDistance($ref.waste.getLocation())
				</inhibits>
			</deliberation>
			<!-- The goal is achieved when the waste is in some wastebin. -->
			<targetcondition>
				(select one Wastebin $wastebin from $beliefbase.wastebins
				where $wastebin.contains($goal.waste))!=null
			</targetcondition>
		</achievegoal>

		<!-- Look out for waste when nothing better to do, what means that
			the agent is not cleaning, not loading and it is daytime. -->
		<performgoal name="performlookforwaste" retry="true" exclude="never">
			<contextcondition>
				$beliefbase.daytime.booleanValue()
 			</contextcondition>
 		</performgoal>

		<!-- Perform patrols at night when the agent is not loading. -->
		<performgoal name="performpatrol" retry="true" exclude="never">
			<contextcondition>
				!$beliefbase.daytime.booleanValue()
 			</contextcondition>
 		</performgoal>

		<!-- Sub-level goals -->

		<!-- Pick up a piece of waste. -->
		<achievegoal name="achievepickupwaste" retry="false">
			<parameter name="waste" class="Waste"/>
		</achievegoal>

		<!-- Drop a piece of waste into a wastebin. -->
		<achievegoal name="achievedropwaste" retry="true" exclude="never">
			<parameter name="wastebin" class="Wastebin"/>
			<!-- The goal has failed when the aimed wastebin is full. -->
			<failurecondition>
				(select one Wastebin $wastebin
 				from $beliefbase.wastebins
				where $goal.wastebin.getId().equals($wastebin.getId())).isFull()
			</failurecondition>
		</achievegoal>

		<!-- Try to move to the specified location. -->
		<achievegoal name="achievemoveto">
			<parameter name="location" class="Location"/>
			<!-- The goal has been reached when the agent's location is
				near the target position as specified in the parameter. -->
			<targetcondition>
 				$beliefbase.my_location.isNear($goal.location)
			</targetcondition>
		</achievegoal>

		<!-- Try to find a not full waste bin that
			is as near as possible to the agent. -->
		<querygoal name="querywastebin" exclude="never">
			<parameter name="result" class="Wastebin" direction="out">
				<value evaluationmode="dynamic">
					select one Wastebin $wastebin
					from $beliefbase.wastebins
					where !$wastebin.isFull()
					order by $beliefbase.my_location.getDistance($wastebin.getLocation())
				</value>
			</parameter>
		</querygoal>

		<!-- Find the nearest charging station. -->
		<querygoal name="querychargingstation" exclude="never">
			<parameter name="result" class="Chargingstation" direction="out">
				<value evaluationmode="dynamic">
					select one Chargingstation $station
					from $beliefbase.chargingstations
					order by $beliefbase.my_location.getDistance($station.getLocation())
				</value>
			</parameter>
		</querygoal>
		
		<!-- Basic environment actions modelled as goals to handle failures. -->

		<!-- Get the current vision. -->
		<achievegoal name="get_vision_action">
			<parameter name="vision" class="Vision" direction="out"/>
		</achievegoal>

		<!-- Pick up a piece of waste. -->
		<achievegoal name="pickup_waste_action">
			<parameter name="waste" class="Waste"/>
		</achievegoal>

		<!-- Drop a piece of waste. -->
		<achievegoal name="drop_waste_action">
			<parameter name="waste" class="Waste"/>
			<parameter name="wastebin" class="Wastebin"/>
		</achievegoal>

		<!-- Memorize the already visited positions in a raster. -->
		<performgoal name="performmemorizepositions"/>

		<!-- Imported DF-Goals -->

		<achievegoalref name="df_search">
			<concrete ref="dfcap.df_search"/>
		</achievegoalref>

		<achievegoalref name="rp_initiate">
			<concrete ref="procap.rp_initiate"/>
		</achievegoalref>
 	</goals>

	<plans>
		<!-- Walk to the least seen positions.
 			Position just visited have value 1. The longer the position
 			was not visted the lower the value. Good for seeking movable targets. -->
		<plan name="leastseenwalk"> 
			<body type="mobile" class="LeastSeenWalkPlan" />
			<!-- <body type="mobile">new LeastSeenWalkPlan()</body> -->
			<trigger>
				<goal ref="performlookforwaste"/>
			</trigger>
		</plan>

		<!-- This plan explores the map by walking to unknown positions.
 			Uses the absolute quantity of visits at the map points.
 			Good for seeking firm targets.-->
		<plan name="exploremap">
			<body type="mobile" class="ExploreMapPlan" />
			<!-- <body type="mobile">new ExploreMapPlan()</body> -->
			<trigger>
				<goal ref="querywastebin"/>
				<goal ref="querychargingstation"/>
			</trigger>
		</plan>

		<!-- Perform patrols. -->
		<plan name="patrol">
			<body type="mobile" class="PatrolPlan" />
			<!-- <body type="mobile">new PatrolPlan()</body> -->
			<trigger>
				<goal ref="performpatrol"/>
			</trigger>
		</plan>

		<!-- Clean up waste by picking it up
			and carrying it to a waste bin. -->
		<plan name="cleanup">
			<parameter name="waste" class="Waste">
 				<goalmapping ref="achievecleanup.waste"/>
			</parameter>
			<body type="mobile" class="CleanUpWastePlan" />
			<!-- <body type="mobile">new CleanUpWastePlan()</body> -->
			<trigger>
				<goal ref="achievecleanup"/>
			</trigger>
		</plan>

		<!-- Pick up a waste. -->
		<plan name="pickupwaste">
			<parameter name="waste" class="Waste">
 				<goalmapping ref="achievepickupwaste.waste"/>
			</parameter>
			<body type="mobile" class="PickUpWastePlan" />
			<!-- <body type="mobile">new PickUpWastePlan()</body> -->
			<trigger>
				<goal ref="achievepickupwaste"/>
			</trigger>
		</plan>

		<!-- Drop a waste into a waste bin. -->
		<plan name="dropwaste">
			<parameter name="wastebin" class="Wastebin">
 				<goalmapping ref="achievedropwaste.wastebin"/>
			</parameter>
			<body type="mobile" class="DropWastePlan" />
			<!-- <body type="mobile">new DropWastePlan()</body> -->
			<trigger>
				<goal ref="achievedropwaste"/>
			</trigger>
		</plan>

		<!-- Load the battery. -->
		<plan name="loadbattery">
			<body type="mobile" class="LoadBatteryPlan" />
			<!-- <body type="mobile">new LoadBatteryPlan()</body>-->
			<trigger>
				<goal ref="maintainbatteryloaded"/>
			</trigger>
		</plan>

		<!-- Move to a location. -->
		<plan name="moveto">
			<parameter name="location" class="Location">
				<goalmapping ref="achievemoveto.location"/>
			</parameter>
			<body type="mobile" class="MoveToLocationPlan"/>
			<!-- <body type="mobile">new MoveToLocationPlan()</body> -->
			<trigger>
				<goal ref="achievemoveto"/>
			</trigger>
			<contextcondition>$beliefbase.my_chargestate.doubleValue() &gt; 0</contextcondition>
		</plan>

		<!-- This plan memorizes the positions. -->
		<plan name="memorizepositions">
			<body type="mobile" class="MemorizePositionsPlan" />
			<!-- <body type="mobile">new MemorizePositionsPlan()</body> -->
			<trigger>
				<goal ref="performmemorizepositions"/>
			</trigger>
		</plan>

		<!-- Pickup waste action. -->
		<plan name="remotepickupwasteaction">
			<parameter name="waste" class="Waste">
 				<goalmapping ref="pickup_waste_action.waste"/>
			</parameter>
			<body type="mobile" class="RemotePickUpWasteActionPlan" />
			<!-- <body type="mobile">new RemotePickUpWasteActionPlan()</body> -->
			<trigger>
				<goal ref="pickup_waste_action"/>
			</trigger>
		</plan>

		<!-- Drop waste action. -->
		<plan name="remotedropwasteaction">
			<parameter name="waste" class="Waste">
 				<goalmapping ref="drop_waste_action.waste"/>
			</parameter>
			<parameter name="wastebin" class="Wastebin">
 				<goalmapping ref="drop_waste_action.wastebin"/>
 			</parameter>
			<body type="mobile" class="RemoteDropWasteActionPlan" />
			<!-- <body type="mobile">new RemoteDropWasteActionPlan()</body> -->
			<trigger>
				<goal ref="drop_waste_action"/>
			</trigger>
		</plan>

		<!-- Drop waste action. -->
		<plan name="remotegetvisionaction">
			<parameter name="vision" class="Vision">
 				<goalmapping ref="get_vision_action.vision"/>
			</parameter>
			<body type="mobile" class="RemoteGetVisionActionPlan" />
			<!-- <body type="mobile">new RemoteGetVisionActionPlan()</body> -->
			<trigger>
				<goal ref="get_vision_action"/>
			</trigger>
		</plan>

		<!-- Pickup waste action. -->
		<plan name="localpickupwasteaction" priority="1">
			<parameter name="waste" class="Waste">
 				<goalmapping ref="pickup_waste_action.waste"/>
			</parameter>
			<body type="mobile" class="LocalPickUpWasteActionPlan" />
			<!-- <body type="mobile">new LocalPickUpWasteActionPlan()</body> -->
			<trigger>
				<goal ref="pickup_waste_action"/>
			</trigger>
			<precondition>$beliefbase.environment!=null</precondition>
		</plan>

		<!-- Drop waste action. -->
		<plan name="localdropwasteaction" priority="1">
			<parameter name="waste" class="Waste">
 				<goalmapping ref="drop_waste_action.waste"/>
			</parameter>
			<parameter name="wastebin" class="Wastebin">
 				<goalmapping ref="drop_waste_action.wastebin"/>
 			</parameter>
			<body type="mobile" class="LocalDropWasteActionPlan" />
			<!-- <body type="mobile">new LocalDropWasteActionPlan()</body> -->
			<trigger>
				<goal ref="drop_waste_action"/>
			</trigger>
			<precondition>$beliefbase.environment!=null</precondition>
		</plan>

		<!-- Drop waste action. -->
		<plan name="localgetvisionaction" priority="1">
			<parameter name="vision" class="Vision">
 				<goalmapping ref="get_vision_action.vision"/>
			</parameter>
			<body type="mobile" class="LocalGetVisionActionPlan" />
			<!-- <body type="mobile">new LocalGetVisionActionPlan()</body> -->
			<trigger>
				<goal ref="get_vision_action"/>
			</trigger>
			<precondition>$beliefbase.environment!=null</precondition>
		</plan>

		<!-- Create and show the gui.-->
		<plan name="gui">
			<body type="mobile" class="GUIPlan" />
			<!-- <body type="mobile">new GUIPlan()</body> -->
		</plan>

	</plans>
	
	<expressions>
		<!-- Query all objects from the beliefs that are currently in sight.-->
		<expression name="query_in_vision_objects">
			select LocationObject $object
			from SUtil.joinArbitraryArrays(new Object[]
 				{
 					$beliefbase.wastes,
 					$beliefbase.wastebins,
 					$beliefbase.chargingstations,
 					$beliefbase.cleaners
				})
			where $beliefbase.my_location.isNear($object.getLocation(), $beliefbase.my_vision.doubleValue())
		</expression>

		<!-- Query the max quantity map point. -->
		<expression name="query_max_quantity">
			select one MapPoint $mp
			from $beliefbase.visited_positions
			order by $mp.getQuantity() desc
		</expression>

		<!-- Query the map points ordered by their quantity
 			(least ones first). -->
		<expression name="query_min_quantity">
			select MapPoint $mp
			from $beliefbase.visited_positions
			order by $mp.getQuantity()
		</expression>

		<!-- Query the map points ordered by their seen value
 			(least ones first). -->
		<expression name="query_min_seen">
			select MapPoint $mp
			from $beliefbase.visited_positions
			order by $mp.getSeen()
		</expression>
	</expressions>

	<properties>
		<property name="logging.level">Level.WARNING</property>
<!--		<property name="debugging">true</property>-->
	</properties>

	<configurations>
		<configuration name="default">
			<goals>
				<initialgoal ref="performlookforwaste"/>
				<initialgoal ref="performpatrol"/>
				<initialgoal ref="maintainbatteryloaded"/>
				<initialgoal ref="performmemorizepositions"/>				
			</goals>
			<plans>
				<initialplan ref="gui"/>
			</plans>
		</configuration>
		<configuration name="nogui">
			<goals>
				<initialgoal ref="performlookforwaste"/>
				<initialgoal ref="performpatrol"/>
				<initialgoal ref="maintainbatteryloaded"/>
				<initialgoal ref="performmemorizepositions"/>				
			</goals>
		</configuration>
	</configurations>
</agent>

