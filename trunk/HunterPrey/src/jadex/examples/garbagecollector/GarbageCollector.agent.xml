<!--
  <H3>Garbarge collector agent.</H3>

  Runs a predefined way on the grid and searches for
  garbage. Whenever it sees garbage at its actual position
  it tries to pick it up and brings it to one of the available
  garbage burners (chosen randomly).
-->

<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex 
	                    http://jadex.sourceforge.net/jadex-0.96.xsd"
	name="GarbageCollector"
	package="jadex.examples.garbagecollector">

	<imports>
		<import>jadex.runtime.*</import>
		<import>jadex.util.*</import>
		<import>jadex.*</import>
	</imports>

	<beliefs>
		<!-- Environment object as singleton.
 			Parameters are name and type of agent for adding it
			No clean solution but avoids registering of agents.-->
		<belief name="env" class="Environment">
			<fact>Environment.getInstance($agent.getType(), $agent.getName())</fact>
 		</belief>

		<!-- The actual position on the grid world. -->
		<belief name="pos" class="Position">
			<fact evaluationmode="dynamic">$beliefbase.env.getPosition($agent.getName())</fact>
 		</belief>

		<!-- When at least one piece of waste is present on the
			current posistion the actual position is perceived as dirty. -->
		<belief name="is_dirty" class="boolean">
 			<fact evaluationmode="dynamic">$beliefbase.env.isDirty($beliefbase.pos)</fact>
		</belief>
		
		<!-- Flag indicating if the agent currently carries garbage. -->
		<belief name="has_garbage" class="boolean">
 			<fact evaluationmode="dynamic">$beliefbase.env.hasGarbage($agent.getName())</fact>
		</belief>
	</beliefs>

	<goals>

		<!-- Goal for picking up a piece of waste, bringing it
			to some burner and going back. A new goal is created
 			whenever the actual position is dirty and there is no
 			burner present. -->
		<achievegoal name="take">
			<unique/>
			<creationcondition>$beliefbase.is_dirty &amp;&amp; !$beliefbase.env.isBurnerPresent($beliefbase.pos)</creationcondition>
			<deliberation>
				<inhibits ref="check"/>
			</deliberation>
		</achievegoal>

		<!-- Goal for running around on the grid and
			searching for garbage. -->
		<performgoal name="check" exclude="never"/>

		<!-- Goal for going to a specified position. -->
		<achievegoal name="go">
			<parameter name="pos" class="Position"/>
		</achievegoal>

		<!-- The goal for picking up waste. Tries endlessly to pick up. -->
		<achievegoal name="pick" exclude="never" retrydelay="100">
 			<dropcondition>!$beliefbase.is_dirty &amp;&amp; !$beliefbase.has_garbage</dropcondition>
		</achievegoal>
	</goals>

	<plans>
		<!-- Plan for taking some waste, bringing it to a burner
			and going back. -->
		<plan name="take_plan">
			<body class="TakePlan"/>
			<!-- <body>new TakePlan()</body> -->
			<trigger>
				<goal ref="take"/>
			</trigger>
		</plan>

		<!-- Plan for running on a predefined route and searching waste. -->
		<plan name="checking_plan">
			<body class="CheckingPlan"/>
			<!-- <body>new CheckingPlan()</body>-->
			<trigger>
				<goal ref="check"/>
			</trigger>
		</plan>

		<!-- Plan for picking up some garbage. -->
		<plan name="pickup_plan">
			<body class="PickUpPlan"/>
			<!-- <body>new PickUpPlan()</body> -->
			<trigger>
				<goal ref="pick"/>
			</trigger>
		</plan>

		<!-- Plan for going to a target position. -->
		<plan name="go_plan">
			<parameter name="pos" class="Position">
 				<goalmapping ref="go.pos"/>
			</parameter>
			<body class="GoPlan"/>
			<!-- <body>new GoPlan()</body> -->
			<trigger>
				<goal ref="go"/>
			</trigger>
		</plan>
	</plans>

	<properties>
		<property name="debugging">false</property>
    </properties>

	<configurations>
		<configuration name="default">
			<goals>
				<!-- Initial goal for searching for garbage. -->
				<initialgoal ref="check"/>			
			</goals>
		</configuration>
	</configurations>

</agent>