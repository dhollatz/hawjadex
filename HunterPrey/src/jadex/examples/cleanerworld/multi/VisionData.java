/*
 * VisionData.java
 *
 * Generated by Protege plugin Beanynizer. 
 * Changes will be lost! 
 */
package jadex.examples.cleanerworld.multi;



/**
 *  Java class for concept Vision of cleaner_beans ontology.
 */
public abstract class VisionData	extends LocationObject implements nuggets.INugget
{
	//-------- constants ----------

	//-------- attributes ----------

	/** Attribute for slot cleaners. */
	protected  java.util.List  cleaners;

	/** Attribute for slot wastebins. */
	protected  java.util.List  wastebins;

	/** Attribute for slot wastes. */
	protected  java.util.List  wastes;

	/** Attribute for slot stations. */
	protected  java.util.List  stations;

	/** Attribute for slot daytime. */
	protected  boolean  daytime;

	//-------- constructors --------

	/**
	 *  Default Constructor. <br>
	 *  Create a new <code>Vision</code>.
	 */
	public VisionData()  { //
		this.cleaners  = new java.util.ArrayList();
		this.wastebins  = new java.util.ArrayList();
		this.wastes  = new java.util.ArrayList();
		this.stations  = new java.util.ArrayList();
	}

	//-------- accessor methods --------

	/**
	 *  Get the cleaners of this Vision.
	 * @return cleaners
	 */
	public Cleaner[]  getCleaners() {
		return (Cleaner[])cleaners.toArray(new Cleaner [cleaners.size()]);
	}

	/**
	 *  Set the cleaners of this Vision.
	 * @param cleaners the value to be set
	 */
	public void  setCleaners(Cleaner[] cleaners) {
		this.cleaners.clear();
		for(int i=0; i<cleaners.length; i++)
			this.cleaners.add(cleaners[i]);
	}

	/**
	 *  Get an cleaners of this Vision.
	 *  @param idx The index.
	 *  @return cleaners
	 */
	public Cleaner  getCleaner(int idx) {
		return (Cleaner)this.cleaners.get(idx);
	}

	/**
	 *  Set a cleaner to this Vision.
	 *  @param idx The index.
	 *  @param cleaner a value to be added
	 */
	public void  setCleaner(int idx, Cleaner cleaner) {
		this.cleaners.set(idx, cleaner);
	}

	/**
	 *  Add a cleaner to this Vision.
	 *  @param cleaner a value to be removed
	 */
	public void  addCleaner(Cleaner cleaner)  {
		this.cleaners.add(cleaner);
	}

	/**
	 *  Remove a cleaner from this Vision.
	 *  @param cleaner a value to be removed
	 *  @return  True when the cleaners have changed.
	 */
	public boolean  removeCleaner(Cleaner cleaner)  {
		return this.cleaners.remove(cleaner);
	}


	/**
	 *  Get the wastebins of this Vision.
	 * @return wastebins
	 */
	public Wastebin[]  getWastebins() {
		return (Wastebin[])wastebins.toArray(new Wastebin [wastebins.size()]);
	}

	/**
	 *  Set the wastebins of this Vision.
	 * @param wastebins the value to be set
	 */
	public void  setWastebins(Wastebin[] wastebins) {
		this.wastebins.clear();
		for(int i=0; i<wastebins.length; i++)
			this.wastebins.add(wastebins[i]);
	}

	/**
	 *  Get an wastebins of this Vision.
	 *  @param idx The index.
	 *  @return wastebins
	 */
	public Wastebin  getWastebin(int idx) {
		return (Wastebin)this.wastebins.get(idx);
	}

	/**
	 *  Set a wastebin to this Vision.
	 *  @param idx The index.
	 *  @param wastebin a value to be added
	 */
	public void  setWastebin(int idx, Wastebin wastebin) {
		this.wastebins.set(idx, wastebin);
	}

	/**
	 *  Add a wastebin to this Vision.
	 *  @param wastebin a value to be removed
	 */
	public void  addWastebin(Wastebin wastebin)  {
		this.wastebins.add(wastebin);
	}

	/**
	 *  Remove a wastebin from this Vision.
	 *  @param wastebin a value to be removed
	 *  @return  True when the wastebins have changed.
	 */
	public boolean  removeWastebin(Wastebin wastebin)  {
		return this.wastebins.remove(wastebin);
	}


	/**
	 *  Get the wastes of this Vision.
	 * @return wastes
	 */
	public Waste[]  getWastes() {
		return (Waste[])wastes.toArray(new Waste [wastes.size()]);
	}

	/**
	 *  Set the wastes of this Vision.
	 * @param wastes the value to be set
	 */
	public void  setWastes(Waste[] wastes) {
		this.wastes.clear();
		for(int i=0; i<wastes.length; i++)
			this.wastes.add(wastes[i]);
	}

	/**
	 *  Get an wastes of this Vision.
	 *  @param idx The index.
	 *  @return wastes
	 */
	public Waste  getWaste(int idx) {
		return (Waste)this.wastes.get(idx);
	}

	/**
	 *  Set a waste to this Vision.
	 *  @param idx The index.
	 *  @param waste a value to be added
	 */
	public void  setWaste(int idx, Waste waste) {
		this.wastes.set(idx, waste);
	}

	/**
	 *  Add a waste to this Vision.
	 *  @param waste a value to be removed
	 */
	public void  addWaste(Waste waste)  {
		this.wastes.add(waste);
	}

	/**
	 *  Remove a waste from this Vision.
	 *  @param waste a value to be removed
	 *  @return  True when the wastes have changed.
	 */
	public boolean  removeWaste(Waste waste)  {
		return this.wastes.remove(waste);
	}


	/**
	 *  Get the stations of this Vision.
	 * @return stations
	 */
	public Chargingstation[]  getStations() {
		return (Chargingstation[])stations.toArray(new Chargingstation [stations.size()]);
	}

	/**
	 *  Set the stations of this Vision.
	 * @param stations the value to be set
	 */
	public void  setStations(Chargingstation[] stations) {
		this.stations.clear();
		for(int i=0; i<stations.length; i++)
			this.stations.add(stations[i]);
	}

	/**
	 *  Get an stations of this Vision.
	 *  @param idx The index.
	 *  @return stations
	 */
	public Chargingstation  getStation(int idx) {
		return (Chargingstation)this.stations.get(idx);
	}

	/**
	 *  Set a station to this Vision.
	 *  @param idx The index.
	 *  @param station a value to be added
	 */
	public void  setStation(int idx, Chargingstation station) {
		this.stations.set(idx, station);
	}

	/**
	 *  Add a station to this Vision.
	 *  @param station a value to be removed
	 */
	public void  addStation(Chargingstation station)  {
		this.stations.add(station);
	}

	/**
	 *  Remove a station from this Vision.
	 *  @param station a value to be removed
	 *  @return  True when the stations have changed.
	 */
	public boolean  removeStation(Chargingstation station)  {
		return this.stations.remove(station);
	}


	/**
	 *  Get the daytime of this Vision.
	 * @return daytime
	 */
	public boolean  isDaytime() {
		return this.daytime;
	}

	/**
	 *  Set the daytime of this Vision.
	 * @param daytime the value to be set
	 */
	public void  setDaytime(boolean daytime) {
		this.daytime = daytime;
	}

	//-------- object methods --------

	/**
	 *  Get a string representation of this Vision.
	 *  @return The string representation.
	 */
	public String toString() {
		return "Vision("
		+ "id="+getId()
		+ ", location="+getLocation()
           + ")";
	}
	
	//--------- nuggets methods ---------
	
	/**
	 * Persist this Vision using the nuggets utility.
	 * @param c 
	 */
	public void _persist(nuggets.ICruncher c) {
		// declare references
		int idCleaners = c.declare(cleaners);
		int idLocation = c.declare(location);
		int idStations = c.declare(stations);
		int idWastebins = c.declare(wastebins);
		int idWastes = c.declare(wastes);
		// persist the nugget
		c.startConcept(this);
		if (idCleaners>0) 
			c.put("Cleaners", idCleaners);
		if (daytime!=false) 
			c.put("Daytime", String.valueOf(daytime));
		if (id!=null) 
			c.put("Id", id);
		if (idLocation>0) 
			c.put("Location", idLocation);
		if (idStations>0) 
			c.put("Stations", idStations);
		if (idWastebins>0) 
			c.put("Wastebins", idWastebins);
		if (idWastes>0) 
			c.put("Wastes", idWastes);
	}
	
	/**
	 * Restore this Vision 
	 * @param a the name of the attribute
	 * @param v the value of the attribute
	 */
	public void _set(String a, Object v) { //
		switch(hash(a)) {
		case 0: id =  (String)v; return;
		case 1: wastes =  (java.util.List)v; return;
		case 2: daytime =  "true".equals(v); return;
		case 3: stations =  (java.util.List)v; return;
		case 4: location =  (Location)v; return;
		case 5: cleaners =  (java.util.List)v; return;
		case 6: wastebins =  (java.util.List)v; return;
		}                        
	}
	
private static final int hash(String name) {
  int h=0;
  int c=name.length();
   if (c<=5) return 0;
   h += 1207625673*name.charAt(5);
   return (h>>>15)%7;
}

}
