<!--
	<H3>Environment Agent for managing the environment object.</H3>
-->
<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex 
	                    http://jadex.sourceforge.net/jadex-0.96.xsd"
	name="Environment"
	package="jadex.examples.hunterprey.environment">

	<imports>
		<import>jadex.examples.hunterprey.*</import>
		<import>jadex.runtime.*</import>
		<import>jadex.util.*</import>
		<import>jadex.adapter.fipa.*</import>
		<import>java.util.logging.Level</import>
	</imports>

	<capabilities>
		<capability name="procap" file="jadex.planlib.Protocols"/>
		<capability name="dfcap" file="jadex.planlib.DF"/>
		<capability name="amscap" file="jadex.planlib.AMS"/>
	</capabilities>

	<beliefs>
		<belief name="environment" class="Environment">
			<!-- <fact>Environment.getInstance()</fact> -->
			<fact>new Environment()</fact>
		</belief>
		<belief name="roundtime" class="long">
			<fact>1000</fact>
		</belief>
		<beliefset name="observers" class="Observer" />

		<!-- The filter for deciding which request messages are handled in this capability. -->
		<beliefref name="rp_filter" class="IFilter">
			<concrete ref="procap.rp_filter"/>
		</beliefref>
		
		<belief name="gui" class="EnvironmentGui">
			<fact>new EnvironmentGui($agent.getExternalAccess())</fact>
		</belief>
	</beliefs>

	<goals>
		<achievegoalref name="df_register">
			<concrete ref="dfcap.df_register"/>
		</achievegoalref>
		<achievegoalref name="df_deregister">
			<concrete ref="dfcap.df_deregister"/>
		</achievegoalref>

		<achievegoalref name="ams_destroy_agent">
			<concrete ref="amscap.ams_destroy_agent"/>
		</achievegoalref>

		<querygoalref name="rp_decide_request">
			<concrete ref="procap.rp_decide_request"/>
		</querygoalref>
		<achievegoalref name="rp_execute_request">
			<concrete ref="procap.rp_execute_request"/>
		</achievegoalref>
	</goals>

	<plans>

		<!-- Dispatch the actual vision to a requester. -->
		<plan name="dispatchvision">
			<parameter name="action" class="Object">
				<goalmapping ref="rp_execute_request.action"/>
			</parameter>
			<parameter name="result" class="Object" direction="out">
				<goalmapping ref="rp_execute_request.result"/>
			</parameter>
			<body class="DispatchVisionPlan"/>
			<!-- <body>new DispatchVisionPlan()</body> -->
			<trigger>
				<goal ref="rp_execute_request">
					<match>$goal.getParameter("action").getValue() instanceof RequestVision</match>
				</goal>
				<!--<messageevent ref="request_vision"/>-->
			</trigger>
		</plan>

		<!-- Dispatch the world size to a requester. -->
		<plan name="dispatchworldsize">
			<parameter name="action" class="Object">
				<goalmapping ref="rp_execute_request.action"/>
			</parameter>
			<parameter name="result" class="Object" direction="out">
				<goalmapping ref="rp_execute_request.result"/>
			</parameter>
			<body class="DispatchWorldSizePlan"/>
			<!-- <body>new DispatchWorldSizePlan()</body> -->
			<trigger>
				<goal ref="rp_execute_request">
					<match>$goal.getParameter("action").getValue() instanceof RequestWorldSize</match>
				</goal>
				<!--<messageevent ref="request_worldsize"/>-->
			</trigger>
		</plan>

		<!-- Inform the requester if a pickup action succeeds. -->
		<plan name="moverequest">
			<parameter name="action" class="Object">
				<goalmapping ref="rp_execute_request.action"/>
			</parameter>
			<parameter name="result" class="Object" direction="out">
				<goalmapping ref="rp_execute_request.result"/>
			</parameter>
			<body class="MovePlan"/>
			<!-- <body>new MovePlan()</body>-->
			<trigger>
				<goal ref="rp_execute_request">
					<match>$goal.getParameter("action").getValue() instanceof RequestMove</match>
				</goal>
				<!--<messageevent ref="request_move"/>-->
			</trigger>
		</plan>

		<!-- Inform the requester if a drop action succeeds. -->
		<plan name="eatrequest">
			<parameter name="action" class="Object">
				<goalmapping ref="rp_execute_request.action"/>
			</parameter>
			<parameter name="result" class="Object" direction="out">
				<goalmapping ref="rp_execute_request.result"/>
			</parameter>
			<body class="EatPlan"/>
			<!-- <body>new EatPlan()</body> -->
			<trigger>
				<goal ref="rp_execute_request">
					<match>$goal.getParameter("action").getValue() instanceof RequestEat</match>
				</goal>
				<!--<messageevent ref="request_eat"/>-->
			</trigger>
		</plan>

		<!-- Simulation plan. -->
		<plan name="simticker">
			<body class="SimulationTickerPlan"/>
			<!-- <body>new SimulationTickerPlan()</body> -->
		</plan>
	</plans>

	<events>
<!--		<messageevent name="request_vision" type="fipa" direction="receive">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<parameter name="language" class="String" direction="fixed">
				<value>SFipa.NUGGETS_XML</value>
 			</parameter>
			<parameter name="ontology" class="String" direction="fixed">
				<value>HunterPreyOntology.ONTOLOGY_NAME</value>
 			</parameter>
			<parameter name="content-class" class="Class" direction="fixed">
				<value>RequestVision.class</value>
			</parameter>
		</messageevent>

		<messageevent name="request_worldsize" type="fipa" direction="receive">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<parameter name="language" class="String" direction="fixed">
				<value>SFipa.NUGGETS_XML</value>
 			</parameter>
			<parameter name="ontology" class="String" direction="fixed">
				<value>HunterPreyOntology.ONTOLOGY_NAME</value>
 			</parameter>
			<parameter name="content-class" class="Class" direction="fixed">
				<value>RequestWorldSize.class</value>
			</parameter>
		</messageevent>

		<messageevent name="request_move" type="fipa" direction="receive">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<parameter name="language" class="String" direction="fixed">
				<value>SFipa.NUGGETS_XML</value>
 			</parameter>
			<parameter name="ontology" class="String" direction="fixed">
				<value>HunterPreyOntology.ONTOLOGY_NAME</value>
 			</parameter>
			<parameter name="content-class" class="Class" direction="fixed">
				<value>RequestMove.class</value>
			</parameter>
		</messageevent>

		<messageevent name="request_eat" type="fipa" direction="receive">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<parameter name="language" class="String" direction="fixed">
				<value>SFipa.NUGGETS_XML</value>
 			</parameter>
			<parameter name="ontology" class="String" direction="fixed">
				<value>HunterPreyOntology.ONTOLOGY_NAME</value>
 			</parameter>
			<parameter name="content-class" class="Class" direction="fixed">
				<value>RequestEat.class</value>
			</parameter>
		</messageevent>

		<messageevent name="inform_done" type="fipa" direction="send">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
			<parameter name="language" class="String" direction="fixed">
				<value>SFipa.NUGGETS_XML</value>
 			</parameter>
			<parameter name="ontology" class="String" direction="fixed">
				<value>HunterPreyOntology.ONTOLOGY_NAME</value>
 			</parameter>
			<parameter name="content-class" class="Class" direction="fixed">
				<value>Done.class</value>
			</parameter>
		</messageevent>

		<messageevent name="failure" type="fipa" direction="send">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.FAILURE</value>
			</parameter>
			<parameter name="language" class="String">
<!- -				<value>"plain-text"</value>- ->
			</parameter>
			<parameter name="content-class" class="Class" direction="fixed">
				<value>ContentElementList.class</value>
			</parameter>
		</messageevent>
-->
		<messageevent name="inform_vision" type="fipa" direction="send">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
			<parameter name="language" class="String" direction="fixed">
				<value>SFipa.NUGGETS_XML</value>
 			</parameter>
			<parameter name="ontology" class="String" direction="fixed">
				<value>HunterPreyOntology.ONTOLOGY_NAME</value>
			</parameter>
			<parameter name="content" class="CurrentVision"/>
		</messageevent>
	</events>

	<properties>
<!--		<property name="logging.level">java.util.logging.Level.WARNING</property>-->
		<property name="fipa.servicedescription.environment">
			SFipa.createServiceDescription("environment-service", "hunter-prey environment", "University of Hamburg",
				new String[]{"nuggets_xml"}, new String[]{"hunterprey"}, new String[]{"fipa-request"}, null)
		</property>
		<property name="fipa.agentdescription.environment">
			SFipa.createAgentDescription(null, (ServiceDescription)$propertybase.getProperty("fipa.servicedescription.environment"))
		</property>
	</properties>

	<configurations>
		<configuration name="default">
			<beliefs>
				<initialbelief ref="rp_filter">
					<fact>IFilter.ALWAYS</fact>
				</initialbelief>
			</beliefs>
			<goals>
				<initialgoal ref="df_register">
					<parameter ref="description">
 						<value>$agent.getPropertybase().getProperty("fipa.agentdescription.environment")</value>
 					</parameter>
				</initialgoal>
				<endgoal ref="df_deregister"/>
			</goals>
			<plans>
				<initialplan ref="simticker"/>
			</plans>
		</configuration>
	</configurations>

</agent>

