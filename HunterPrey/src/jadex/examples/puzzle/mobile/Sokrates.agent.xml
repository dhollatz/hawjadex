<!--
  <H3>Puzzling mobile agent.</H3>
  
  This agent that plays a board game for one player.
  This example is a Jadex adaption of the original JACK(TM)
  puzzle example and was used for performance comparisons
  between both platforms (cf. readme.txt).
  This version uses mobile plans and therefore incurs
  no overhead for thread switching (faster than the
  benchmarked version).
-->

<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex 
	                    http://jadex.sourceforge.net/jadex-0.96.xsd"
	name="Sokrates"
	package="jadex.examples.puzzle.mobile">

	<imports>
		<import>jadex.examples.puzzle.Board</import>
		<import>jadex.examples.puzzle.IBoard</import>
		<import>jadex.examples.puzzle.JackBoard</import>
		<import>jadex.examples.puzzle.Move</import>
		<import>jadex.runtime.*</import>
		<import>jadex.util.*</import>
		<import>jadex.*</import>
		<import>java.util.*</import>
		<import>jadex.examples.puzzle.mobile.*</import>
	</imports>

	<beliefs>
		<!-- The game board offers possibilities to make moves,
			take back moves and keep track of the game history. -->
		<belief name="board" class="IBoard"/>
		<!-- The number of moves already tried. -->
		<belief name="triescnt" class="Integer">
			<fact>0</fact>
		</belief>
		<!-- The delay in milliseconds between two moves. -->
		<belief name="move_delay" class="Long">
			<fact>500</fact>
		</belief>
		<!-- The meta-level strategy for choosing moves
 			(none=choose the first applicable, long=prefer jump moves,
			same_long=prefer long moves of same color, alter_long=prefer
			long move of alternate color. -->
		<belief name="ml" class="String">
			<fact>"same_long"</fact>
		</belief>
	</beliefs>

	<goals>
		<!-- The goal to make a move on the board that is the solution. -->
		<achievegoal name="makemove" recalculate="false">
			<parameter name="depth" class="Integer"/>
			<targetcondition>$beliefbase.board.isSolution()</targetcondition>
 		</achievegoal>

		<!-- The meta-level goal for choosing between plans for the makemove goal. -->
		<metagoal name="choosemove" recalculate="false">
			<parameterset name="applicables" class="ICandidateInfo"/>
			<parameterset name="result" class="ICandidateInfo" direction="out"/>
			<trigger>
				<goal ref="makemove"/>
			</trigger>
		</metagoal>
	</goals>

	<plans>
		<!-- Start puzzling on the board and measure the needed time. -->
		<plan name="play_game_plan">
			<body type="mobile" class="PlayGamePlan"/>
			<!-- <body type="mobile">new PlayGamePlan()</body> -->
		</plan>

		<!-- Make a move on the board and create a subgoal for the next move. -->
		<plan name="move_plan">
			<parameter name="move" class="Move">
				<bindingoptions>$beliefbase.board.getPossibleMoves()</bindingoptions>
			</parameter>
			<parameter name="depth" class="Integer">
				<goalmapping ref="makemove.depth"/>
			</parameter>
			<body type="mobile" class="MovePlan"/>
			<!-- <body type="mobile">new MovePlan()</body> -->
			<trigger>
				<goal ref="makemove"/>
			</trigger>
		</plan>

		<!-- Meta-level plan used to choose among the possible move plans. -->
		<plan name="choose_move_plan">
			<parameterset name="applicables" class="ICandidateInfo">
				<goalmapping ref="choosemove.applicables"/>
			</parameterset>
			<parameterset name="result" class="ICandidateInfo" direction="out">
				<goalmapping ref="choosemove.result"/>
			</parameterset>
			<body type="mobile" class="ChooseMovePlan"/>
			<!-- <body type="mobile">new ChooseMovePlan()</body> -->
			<trigger>
				<goal ref="choosemove"/>
			</trigger>
		</plan>
		
		<!-- Create and show the gui.-->
		<plan name="gui">
			<body type="mobile" class="GUIPlan"/>
			<!-- <body type="mobile">new GUIPlan()</body> -->
		</plan>
	</plans>

	<configurations default="5x5 board (standard)">
		<configuration name="3x3 board (no solution)">
			<beliefs>
				<initialbelief ref="board">
 					<fact>new Board(3)</fact>
				</initialbelief>
			</beliefs>
			<plans>
				<initialplan name="gui" ref="gui"/>
				<initialplan name="start_playing" ref="play_game_plan"/>
			</plans>
		</configuration>
		<configuration name="5x5 board (standard)" >
			<beliefs>
				<initialbelief ref="board">
 					<fact>new Board(5)</fact>
				</initialbelief>
			</beliefs>
			<plans>
				<initialplan name="gui" ref="gui"/>
				<initialplan name="start_playing" ref="play_game_plan"/>
			</plans>
		</configuration>
		<configuration name="7x7 board (takes quite long)">
			<beliefs>
				<initialbelief ref="board">
 					<fact>new Board(7)</fact>
				</initialbelief>
			</beliefs>
			<plans>
				<initialplan name="gui" ref="gui"/>
				<initialplan name="start_playing" ref="play_game_plan"/>
			</plans>
		</configuration>
		<configuration name="9x9 board (takes very long)">
			<beliefs>
				<initialbelief ref="board">
 					<fact>new Board(9)</fact>
				</initialbelief>
			</beliefs>
			<plans>
				<initialplan name="gui" ref="gui"/>
				<initialplan name="start_playing" ref="play_game_plan"/>
			</plans>
		</configuration>
		<configuration name="jack-5x5">
			<beliefs>
				<initialbelief ref="board">
 					<fact>new JackBoard()</fact>
				</initialbelief>
			</beliefs>
			<plans>
				<initialplan name="gui" ref="gui"/>
				<initialplan name="start_playing" ref="play_game_plan"/>
			</plans>
		</configuration>
	</configurations>
</agent>